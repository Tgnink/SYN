# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from matplotlib import pyplot as plt
import shift_roi
from PyQt5 import QtCore, QtGui, QtWidgets
import func_base
# import synapse_roi
from PyQt5.QtCore import Qt
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget
# import expand_roi
from PyQt5.QtGui import QIcon
from logger_base import log_exception
import align

class Drag_Qline(QtWidgets.QLineEdit):
    def __init__(self,*args,**kwargs):
        super().__init__()
        self.setAcceptDrops(True)


    def dragEnterEvent(self, event):
        if event.mimeData().hasUrls()  :
            
            event.accept()
        else:
            event.ignore()

    def dragMoveEvent(self, event):
        if event.mimeData().hasUrls():
            try:
                event.setDropAction(Qt.CopyAction)
            except Exception as e:
                print(e)
            event.accept()
        else:
            event.ignore()

    def dropEvent(self, event):
        try:
            if event.mimeData().hasUrls:
                event.setDropAction(Qt.CopyAction)
                event.accept()
                links = []
                for url in event.mimeData().urls():
                    self.setText(str(url.toLocalFile()))
                    links.append(str(url.toLocalFile()))
                print(links)
            else:
                event.ignore()
        except Exception as e:
            print(e)
class Folder_QPush(QtWidgets.QPushButton):
    opentype=['file','folder']
    def __init__(self,widget,Qline,type='folder') :
        super().__init__(widget)
        self.setText("...")
        self.qline=Qline
        self.type=type
        self.setMaximumSize(QtCore.QSize(25, 25))
        self.clicked.connect(self.folder_open)
    def folder_open(self):
        if self.type=='folder':
            fname = QtWidgets.QFileDialog.getExistingDirectory(self)
            if fname:
                self.qline.setText(fname)
        elif self.type=='file':
            fname = QtWidgets.QFileDialog.getOpenFileName(self,'Open file')
            if fname[0]:
                self.qline.setText(fname[0])

        # dialog.setFileMode(QFileDialog.Directory)
        # dialog.setOption(QFileDialog.ShowDirsOnly)
        # dialog.exec_()

class Slide_digital(QtWidgets.QWidget):
    
    def __init__(self,text,maxv,step):
        super().__init__()  # use qwidget to creat window
        self.maxv=maxv
        self.step=step
        self.initUI(text)
    def initUI(self,text):
        '''
        tGui.QLCDNumber和QtGui.QSlider模块，
        我们能拖动滑块让数字跟着发生改变。
        '''
        self.setMaximumHeight(50)
        lcd = QtWidgets.QLineEdit(self)#he QLCDNumber widget displays a number with LCD-like digits.
        lcd.setMaximumHeight(30)
        lcd.setMaximumWidth(50)
        lcd.setText(str(0))
        sld = QtWidgets.QSlider(Qt.Horizontal, self)
        sld.setMaximumHeight(30)
        sld.setPageStep(0.1)
        label=QtWidgets.QLabel(text)
        label.setMaximumHeight(30)
        
        # 在继承QMainwindow的时候，如果你想在窗口中任意位置都获取坐标值的话，
        # 就得对每个控件都设置setMouseTracking(True)，
        # 不然就会出现鼠标在空间上面的时候无法获取坐标值；
        # 如果你在重写mouseMoveEvent的时候不加setMouseTracking(True)，
        # 那么你只有按住鼠标左键移动的时候才会获取值。
        # 所以，把想获取的地方都加上吧。
        lcd.setMouseTracking(True)
        
        sld.setMouseTracking(True)
        sld.setMinimum(0)
        sld.setMaximum(self.maxv)
        self.denominator=1/self.step

        vbox = QtWidgets.QHBoxLayout()
        vbox.addWidget(label)
        vbox.addWidget(sld)
        vbox.addWidget(lcd)
        self.setLayout(vbox)
        #widGet=QWidget()
        #widGet.setLayout(vbox)
        #self.setCentralWidget(widGet)
        sld.valueChanged.connect(self.setText)#这里是把滑块的变化和数字的变化绑定在一起。
        self.lcd=lcd
    def setText(self,v):
        self.lcd.setText(str(v/self.denominator))
    def text(self):
        return self.lcd.text()

class PopComboBos(QtWidgets.QComboBox):
    def __init__(self,stringlist,indexlist=None):
        super().__init__()
        self.stringlist=stringlist
        self.indexlist=indexlist
        self.add_items(stringlist,indexlist)
    def add_items(self,stringlist,indexlist):
        if not indexlist:
            indexlist=list(range(len(stringlist)))
        for ind,name in zip (indexlist,stringlist):
            self.addItem(name,ind)




class Ui_MainWindow(QMainWindow):
    def __init__(self) -> None:
        super().__init__()
        self.on_inTopCheckBox_clicked(True)
        self.setWindowIcon(QIcon('synapse.png'))
        self.setupUi()
    def on_inTopCheckBox_clicked(self, checked):
        if not checked:
            self.setWindowFlags(Qt.Widget) #取消置顶
        else:
             self.setWindowFlags(Qt.WindowStaysOnTopHint ) #置顶
        self.show()
    def setupUi(self, ):
        self.setObjectName("self")
        self.resize(735, 444)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(50, 30, 651, 331))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")

        #--- out folder---#
        self.outfolder_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.outfolder_label.setObjectName("outfolder_label")
        self.horizontalLayout_4.addWidget(self.outfolder_label)
        self.outfile_line = Drag_Qline(self.verticalLayoutWidget)
        self.outfile_line.setObjectName("outfile_line")
        self.horizontalLayout_4.addWidget(self.outfile_line)
        self.outfolder_chose = Folder_QPush(self.verticalLayoutWidget,self.outfile_line,'folder')
        self.horizontalLayout_4.addWidget(self.outfolder_chose)
        self.outfolder_exe = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.outfolder_exe.setObjectName("outfolder_exe")
        self.horizontalLayout_4.addWidget(self.outfolder_exe)
        self.verticalLayout.addLayout(self.horizontalLayout_4)

        #--- template ---#
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.template_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.template_label.setObjectName("template_label")
        self.horizontalLayout_3.addWidget(self.template_label)
        self.template_line = Drag_Qline(self.verticalLayoutWidget)
        self.template_line.setObjectName("template_line")
        self.horizontalLayout_3.addWidget(self.template_line)
        self.template_chose = Folder_QPush(self.verticalLayoutWidget,self.template_line,'file')
        self.horizontalLayout_3.addWidget(self.template_chose)
        self.template_exe = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.template_exe.setObjectName("template_exe")
        self.horizontalLayout_3.addWidget(self.template_exe)
        self.verticalLayout.addLayout(self.horizontalLayout_3)

        #---target ---#
        # self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        # self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        # self.target_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        # self.target_label.setObjectName("target_label")
        # self.horizontalLayout_2.addWidget(self.target_label)
        # self.target_line = Drag_Qline(self.verticalLayoutWidget)
        # self.target_line.setObjectName("target_line")
        # self.horizontalLayout_2.addWidget(self.target_line)
        # self.target_chose = Folder_QPush(self.verticalLayoutWidget,self.target_line,'file')
        # self.horizontalLayout_2.addWidget(self.target_chose)
        # self.target_exe = QtWidgets.QPushButton(self.verticalLayoutWidget)
        # self.target_exe.setObjectName("target_exe")
        # self.horizontalLayout_2.addWidget(self.target_exe)
        # self.verticalLayout.addLayout(self.horizontalLayout_2)

        #--- expand ---#
        # self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        # self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        # self.expand_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        # self.expand_label.setObjectName("expand_label")
        # self.horizontalLayout_5.addWidget(self.expand_label)
        # self.expand_line = Drag_Qline(self.verticalLayoutWidget)
        # self.expand_line.setObjectName("expand_line")
        # self.horizontalLayout_5.addWidget(self.expand_line)
        # self.expand_chose = Folder_QPush(self.verticalLayoutWidget,self.expand_line,'file')
        # self.horizontalLayout_5.addWidget(self.expand_chose)
        # self.expand_roi_pixel=QtWidgets.QLineEdit('0')
        # self.horizontalLayout_5.addWidget(self.expand_roi_pixel)
        # self.expand_exe = QtWidgets.QPushButton(self.verticalLayoutWidget)
        # self.expand_exe.setObjectName("expand_exe")
        # self.horizontalLayout_5.addWidget(self.expand_exe)
        # self.verticalLayout.addLayout(self.horizontalLayout_5)
        
        #self.expand_slide_digital=Slide_digital('roi enlarge',5,1)
        #self.verticalLayout.addWidget(self.expand_slide_digital)
        
        #--- shift ---#
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.shift_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.shift_label.setObjectName("shift_label")
        self.horizontalLayout.addWidget(self.shift_label)
        self.shift_line = Drag_Qline(self.verticalLayoutWidget)
        self.shift_line.setObjectName("shift_line")
        self.horizontalLayout.addWidget(self.shift_line)
        self.shift_chose = Folder_QPush(self.verticalLayoutWidget,self.shift_line,'file')
        self.horizontalLayout.addWidget(self.shift_chose)
        self.shift_exe = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.shift_exe.setObjectName("shift_exe")
        self.shift_factor_mode=QtWidgets.QCheckBox()
        self.shift_slide_range=Slide_digital('shift enlarge',20,1)
        self.shift_slide_roi=Slide_digital('roi enlarge',5,1)
        self.shift_method_chose=PopComboBos(shift_roi.METHODS)
        self.horizontalLayout01=QtWidgets.QHBoxLayout()
        self.horizontalLayout01.addWidget(self.shift_slide_range)
        self.horizontalLayout01.addWidget(self.shift_slide_roi)
        self.horizontalLayout01.addWidget(self.shift_method_chose)
        self.verticalLayout.addLayout(self.horizontalLayout01)
        self.horizontalLayout.addWidget(self.shift_factor_mode)
        self.horizontalLayout.addWidget(self.shift_exe)
        self.verticalLayout.addLayout(self.horizontalLayout)

        # align
        self.horizontalLayout6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout6.setObjectName("horizontalLayout")
        self.align_label = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.align_label.setObjectName("align_label")
        self.horizontalLayout6.addWidget(self.align_label)
        self.align_line = Drag_Qline(self.verticalLayoutWidget)
        self.align_line.setObjectName("align_line")
        self.horizontalLayout6.addWidget(self.align_line)
        self.align_chose = Folder_QPush(self.verticalLayoutWidget,self.align_line,'file')
        self.horizontalLayout6.addWidget(self.align_chose)
        self.align_exe = QtWidgets.QPushButton(self.verticalLayoutWidget)
        self.horizontalLayout6.addWidget(self.align_exe)
        self.verticalLayout.addLayout(self.horizontalLayout6)



        self.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 735, 26))
        self.menubar.setObjectName("menubar")
        self.menumenu = QtWidgets.QMenu(self.menubar)
        self.menumenu.setObjectName("menumenu")
        self.closemenu = QtWidgets.QMenu(self.menubar)
        self.closemenu.setObjectName("close")
        self.closemenu.addSeparator()
        self.closeAct = QtWidgets.QAction('close fig', self)
        self.closeAct.triggered.connect( self.closefig)
        self.closemenu.addAction(self.closeAct)
        self.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")
        self.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(self)
        self.toolBar.setObjectName("toolBar")
        self.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.menumenu.addSeparator()
        self.menubar.addAction(self.menumenu.menuAction())
        self.menubar.addAction(self.closemenu.menuAction())
        self.command_UI()
        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)
    def closefig(self):
        print('close fig')
        plt.close('all')
    def command_UI(self):
        #self.target_exe.clicked.connect(self.target_analysis)
        self.shift_exe.clicked.connect(self.shift_analysis)
        #self.expand_exe.clicked.connect(self.expand_analysis)
        self.align_exe.clicked.connect(self.align_analysis)
    
    
    @log_exception
    def align_analysis(self,event=None):
        template_file=self.template_line.text()
        align_file=self.align_line.text()
        outfolder=self.outfile_line.text()
        path,filename=os.path.split(align_file)
        filename, postfix = os.path.splitext(filename)
        if 'txt' in postfix:
            #batch process
            align_list=func_base.filelist(align_file)
        else:
            align_list=[align_file]
        out_list=[]
        for alignfile in align_list:
            
            path,filename=os.path.split(alignfile)
            filename, postfix = os.path.splitext(filename)
            outfile=os.path.join(outfolder,filename)
            out_list.append(outfile)
        align.analysis(template_file,align_list,out_list)

    @log_exception
    def shift_analysis(self,event=None):
        enlarge_pixel=int(float(self.shift_slide_range.text()))
        roi_enlarge_pixel=int(float(self.shift_slide_roi.text()))
        print('>',enlarge_pixel)
        if not enlarge_pixel:
            return
        template_file=self.template_line.text()
        shift_file=self.shift_line.text()
        outfolder=self.outfile_line.text()
        path,filename=os.path.split(shift_file)
        filename, postfix = os.path.splitext(filename)
        if 'txt' in postfix:
            #batch process
            shift_list=func_base.filelist(shift_file)
        else:
            shift_list=[shift_file]
        out_list=[]
        for shift in shift_list:
            
            path,filename=os.path.split(shift)
            filename, post = os.path.splitext(filename)
            outfile=os.path.join(outfolder,filename)
            out_list.append(outfile)
        meth=self.shift_method_chose.currentData()
        meth=shift_roi.METHODS[meth]
        if 'txt' in postfix:
            shift_roi.analysis_txt(self,shift_list,template_file,out_list,expand_pixel=enlarge_pixel,roi_enlarge_pixel=roi_enlarge_pixel,meth=meth)
        else:
            shift_roi.analysis(shift_list,template_file,out_list,expand_pixel=enlarge_pixel,roi_enlarge_pixel=roi_enlarge_pixel,meth=meth)
    # @log_exception
    # def target_analysis(self,event=None):
    #     template_file=self.template_line.text()
    #     target_file=self.target_line.text()
    #     outfolder=self.outfile_line.text()
    #     path,filename=os.path.split(target_file)
    #     filename, postfix = os.path.splitext(filename)
    #     if 'txt' in postfix:
    #         #batch process
    #         target_list=func_base.filelist(target_file)
    #     else:
    #         target_list=[target_file]
    #     out_list=[]
    #     for target in target_list:
            
    #         path,filename=os.path.split(target)
    #         filename, postfix = os.path.splitext(filename)
    #         outfile=os.path.join(outfolder,filename)
    #         out_list.append(outfile)
        
    #     synapse_roi.analysis(template_file,target_list,out_list)
    # @log_exception
    # def expand_analysis(self,event=None):
    #     expand_pixel=int(self.expand_roi_pixel.text()) 
    #     expand_file=self.expand_line.text()
    #     outfolder=self.outfile_line.text()
    #     path,filename=os.path.split(expand_file)
    #     filename, postfix = os.path.splitext(filename)
    #     if 'txt' in postfix:
    #         #batch process
    #         expand_list=func_base.filelist(expand_file)
    #     else:
    #         expand_list=[expand_file]
    #     out_list=[]
    #     for expand in expand_list:
            
    #         path,filename=os.path.split(expand)
    #         filename, postfix = os.path.splitext(filename)
    #         outfile=os.path.join(outfolder,filename)
    #         out_list.append(outfile)

    #     expand_roi.analsis(expand_list,out_list,expand_pixel)  




    
    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("self", "synapse roi recorrect"))
        self.outfolder_label.setText(_translate("self", "outfolder"))
        self.outfolder_exe.setText(_translate("self", "confirm"))

        self.template_label.setText(_translate("self", "template"))
        self.template_exe.setText(_translate("self", "confirm"))

        # self.target_label.setText(_translate("self", "targetimage"))
        # self.target_line.setStatusTip(_translate("self", "support img format or Batch processing"))
        # self.target_exe.setText(_translate("self", "execute"))
        
        self.shift_label.setText(_translate("self", "shiftimage"))
        self.shift_line.setStatusTip(_translate("self", "support img format or Batch processing"))
        self.shift_exe.setText(_translate("self", "execute"))
        
        # self.expand_exe.setText(_translate("self", "confirm"))
        # self.expand_label.setText(_translate("self", "expandimage"))
        # self.expand_roi_pixel.setText(_translate("self", "20"))
        # self.expand_roi_pixel.setMaximumWidth(30)

        self.align_label.setText(_translate("self", "alignimage"))
        self.align_line.setStatusTip(_translate("self", "support img format or Batch processing"))
        self.align_exe.setText(_translate("self", "execute"))


        self.menumenu.setTitle(_translate("self", "menu"))
        self.closemenu.setTitle(_translate("self", "close"))
        self.toolBar.setWindowTitle(_translate("self", "toolBar"))

